package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
)

// creates embed file to pull all pwsh scripts into the binary

func main() {
	// 1. Get the package of the file with go:generate comment
	goPackage := os.Getenv("GOPACKAGE")

	// 2. Start a new file in this package
	f := jen.NewFile(goPackage)

	// 3. Add a package comment, so IDEs detect files as generated
	f.PackageComment("Code generated by generator, DO NOT EDIT.")

	// import embed package for side effects
	f.Anon("embed")

	// grab all the scripts to be embedded
	dir, err := os.ReadDir("powershell-scripts")
	if err != nil {
		panic(fmt.Errorf("Could not find PowerShell directory: %w", err))
	}

	// create embedded variables
	for _, file := range dir {
		f.Comment(fmt.Sprintf("//go:embed %s", "powershell-scripts/"+file.Name()))
		f.Var().
			Id(strings.ReplaceAll(strings.ReplaceAll(file.Name(), ".ps1", ""), "-", "_")).
			String()
	}

	//create the cmd struct
	f.Type().Id("cmd").Struct(
		jen.Id("filename").String(),
		jen.Id("name").String(),
		jen.Id("content").String())

	// create the list of embedded variables
	f.Var().Id("cmds").Op("=").Id("[]cmd").ValuesFunc(func(group *jen.Group) {
		for _, file := range dir {
			group.Values(jen.Dict{
				jen.Id("filename"): jen.Lit(file.Name()),
				jen.Id("name"):     jen.Lit(strings.ReplaceAll(file.Name(), ".ps1", "")),
				jen.Id("content"):  jen.Id(strings.ReplaceAll(strings.ReplaceAll(file.Name(), ".ps1", ""), "-", "_")),
			})
		}
	})

	goFile := os.Getenv("GOFILE")
	ext := filepath.Ext(goFile)
	baseFilename := goFile[0 : len(goFile)-len(ext)]
	targetFilename := baseFilename + "_gen.go"

	// no need to remove old file, will be updated on f.Save
	f.Save(targetFilename)
}
